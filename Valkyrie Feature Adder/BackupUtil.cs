#define SINGLEBACKUPFILE

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Valkyrie_Feature_Adder
{
    public static class BackupUtil
    {
        /// <summary>
        /// The directory that will hold backup files generated by this script.
        /// Example: @"C:\Users\TJ\Unity\Backups\";
        /// </summary>
        public const string DirBackup = null;

        private static DateTime s_scriptTime = default(DateTime);
        public static DateTime ScriptTime
        {
            get
            {
                if (s_scriptTime == default(DateTime))
                    s_scriptTime = DateTime.Now;
                return s_scriptTime;
            }
        }

        public static string ScriptDateString => ScriptTime.ToString("MMM-dd-yy");
        public static string ScriptTimeString => ScriptTime.ToString("hh_mm_sstt");

        public static string DirCurrentBackup => $@"{DirBackup}{ScriptDateString}\{ScriptTimeString}\";

        /// <summary>
        /// Creates a copy of a file at a given <paramref name="path"/>
        /// to the specified backup directory.
        /// </summary>
        /// <param name="path">The path of the file to back up.</param>
        public static void BackupFile(string path)
        {
            Debug.Assert(Directory.Exists(DirBackup));

            FileInfo info = new FileInfo(path);

            Debug.Assert(File.Exists(path));

            string dirCurrentBackup = DirCurrentBackup;
            if (!Directory.Exists(dirCurrentBackup))
                Directory.CreateDirectory(dirCurrentBackup);

            string pathDestination;

#if SINGLEBACKUPFILE
            pathDestination = DirCurrentBackup + info.Name;

            if (File.Exists(pathDestination))
                return;
#else
            pathDestination = GetDestinationFileName(info);
#endif

            Debug.Assert(!File.Exists(pathDestination));

            File.Copy(path, pathDestination);
        }

        /// <summary>
        /// Combines the name of a given FileInfo with the directory used to store file backups.
        /// If the file at the path produced already exists, numbers will be appended to the
        /// file name inside parentheses similar to the functionality of Windows explorer.
        /// </summary>
        /// <param name="inputInfo">The FileInfo to generate a destination path from.</param>
        private static string GetDestinationFilePath(FileInfo inputInfo)
        {
            string destination = DirCurrentBackup + inputInfo.Name;

            if (File.Exists(destination))
            {
                string extension = inputInfo.Extension;
                int extensionLength = inputInfo.Extension.Length;
                int length = inputInfo.Name.Length;
                string fileNameBase = inputInfo.Name.Substring(0, length - extensionLength);

                int i = 1;
                do
                {
                    destination = $"{DirCurrentBackup}{fileNameBase} ({i}){extension}";
                    i++;
                }
                while (File.Exists(destination));
            }

            return destination;
        }
    }
}
